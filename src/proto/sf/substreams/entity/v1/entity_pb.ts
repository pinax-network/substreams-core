// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sf/substreams/entity/v1/entity.proto (package sf.substreams.entity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message sf.substreams.entity.v1.EntityChanges
 */
export class EntityChanges extends Message<EntityChanges> {
  /**
   * @generated from field: repeated sf.substreams.entity.v1.EntityChange entity_changes = 5;
   */
  entityChanges: EntityChange[] = [];

  constructor(data?: PartialMessage<EntityChanges>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.entity.v1.EntityChanges";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "entity_changes", kind: "message", T: EntityChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityChanges {
    return new EntityChanges().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityChanges {
    return new EntityChanges().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityChanges {
    return new EntityChanges().fromJsonString(jsonString, options);
  }

  static equals(a: EntityChanges | PlainMessage<EntityChanges> | undefined, b: EntityChanges | PlainMessage<EntityChanges> | undefined): boolean {
    return proto3.util.equals(EntityChanges, a, b);
  }
}

/**
 * @generated from message sf.substreams.entity.v1.EntityChange
 */
export class EntityChange extends Message<EntityChange> {
  /**
   * @generated from field: string entity = 1;
   */
  entity = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: uint64 ordinal = 3;
   */
  ordinal = protoInt64.zero;

  /**
   * @generated from field: sf.substreams.entity.v1.EntityChange.Operation operation = 4;
   */
  operation = EntityChange_Operation.UNSET;

  /**
   * @generated from field: repeated sf.substreams.entity.v1.Field fields = 5;
   */
  fields: Field[] = [];

  constructor(data?: PartialMessage<EntityChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.entity.v1.EntityChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "operation", kind: "enum", T: proto3.getEnumType(EntityChange_Operation) },
    { no: 5, name: "fields", kind: "message", T: Field, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityChange {
    return new EntityChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityChange {
    return new EntityChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityChange {
    return new EntityChange().fromJsonString(jsonString, options);
  }

  static equals(a: EntityChange | PlainMessage<EntityChange> | undefined, b: EntityChange | PlainMessage<EntityChange> | undefined): boolean {
    return proto3.util.equals(EntityChange, a, b);
  }
}

/**
 * @generated from enum sf.substreams.entity.v1.EntityChange.Operation
 */
export enum EntityChange_Operation {
  /**
   * Protobuf default should not be used, this is used so that the consume can ensure that the value was actually specified
   *
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   * @generated from enum value: CREATE = 1;
   */
  CREATE = 1,

  /**
   * @generated from enum value: UPDATE = 2;
   */
  UPDATE = 2,

  /**
   * @generated from enum value: DELETE = 3;
   */
  DELETE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(EntityChange_Operation)
proto3.util.setEnumType(EntityChange_Operation, "sf.substreams.entity.v1.EntityChange.Operation", [
  { no: 0, name: "UNSET" },
  { no: 1, name: "CREATE" },
  { no: 2, name: "UPDATE" },
  { no: 3, name: "DELETE" },
]);

/**
 * @generated from message sf.substreams.entity.v1.Value
 */
export class Value extends Message<Value> {
  /**
   * @generated from oneof sf.substreams.entity.v1.Value.typed
   */
  typed: {
    /**
     * @generated from field: int32 int32 = 1;
     */
    value: number;
    case: "int32";
  } | {
    /**
     * @generated from field: string bigdecimal = 2;
     */
    value: string;
    case: "bigdecimal";
  } | {
    /**
     * @generated from field: string bigint = 3;
     */
    value: string;
    case: "bigint";
  } | {
    /**
     * @generated from field: string string = 4;
     */
    value: string;
    case: "string";
  } | {
    /**
     * @generated from field: string bytes = 5;
     */
    value: string;
    case: "bytes";
  } | {
    /**
     * @generated from field: bool bool = 6;
     */
    value: boolean;
    case: "bool";
  } | {
    /**
     * @generated from field: sf.substreams.entity.v1.Array array = 10;
     */
    value: Array;
    case: "array";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.entity.v1.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "typed" },
    { no: 2, name: "bigdecimal", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "typed" },
    { no: 3, name: "bigint", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "typed" },
    { no: 4, name: "string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "typed" },
    { no: 5, name: "bytes", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "typed" },
    { no: 6, name: "bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "typed" },
    { no: 10, name: "array", kind: "message", T: Array, oneof: "typed" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Value {
    return new Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Value {
    return new Value().fromJsonString(jsonString, options);
  }

  static equals(a: Value | PlainMessage<Value> | undefined, b: Value | PlainMessage<Value> | undefined): boolean {
    return proto3.util.equals(Value, a, b);
  }
}

/**
 * @generated from message sf.substreams.entity.v1.Array
 */
export class Array extends Message<Array> {
  /**
   * @generated from field: repeated sf.substreams.entity.v1.Value value = 1;
   */
  value: Value[] = [];

  constructor(data?: PartialMessage<Array>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.entity.v1.Array";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Array {
    return new Array().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Array {
    return new Array().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Array {
    return new Array().fromJsonString(jsonString, options);
  }

  static equals(a: Array | PlainMessage<Array> | undefined, b: Array | PlainMessage<Array> | undefined): boolean {
    return proto3.util.equals(Array, a, b);
  }
}

/**
 * @generated from message sf.substreams.entity.v1.Field
 */
export class Field extends Message<Field> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional sf.substreams.entity.v1.Value new_value = 3;
   */
  newValue?: Value;

  /**
   * @generated from field: optional sf.substreams.entity.v1.Value old_value = 5;
   */
  oldValue?: Value;

  constructor(data?: PartialMessage<Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.entity.v1.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_value", kind: "message", T: Value, opt: true },
    { no: 5, name: "old_value", kind: "message", T: Value, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Field {
    return new Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJsonString(jsonString, options);
  }

  static equals(a: Field | PlainMessage<Field> | undefined, b: Field | PlainMessage<Field> | undefined): boolean {
    return proto3.util.equals(Field, a, b);
  }
}

