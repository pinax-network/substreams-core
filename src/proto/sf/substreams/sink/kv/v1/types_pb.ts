// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file sf/substreams/sink/kv/v1/types.proto (package sf.substreams.sink.types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message sf.substreams.sink.types.v1.KVPairs
 */
export class KVPairs extends Message<KVPairs> {
  /**
   * @generated from field: repeated sf.substreams.sink.types.v1.KVPair pairs = 2;
   */
  pairs: KVPair[] = [];

  constructor(data?: PartialMessage<KVPairs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.types.v1.KVPairs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pairs", kind: "message", T: KVPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KVPairs {
    return new KVPairs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KVPairs {
    return new KVPairs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KVPairs {
    return new KVPairs().fromJsonString(jsonString, options);
  }

  static equals(a: KVPairs | PlainMessage<KVPairs> | undefined, b: KVPairs | PlainMessage<KVPairs> | undefined): boolean {
    return proto3.util.equals(KVPairs, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.types.v1.KVPair
 */
export class KVPair extends Message<KVPair> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<KVPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.types.v1.KVPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KVPair {
    return new KVPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KVPair {
    return new KVPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KVPair {
    return new KVPair().fromJsonString(jsonString, options);
  }

  static equals(a: KVPair | PlainMessage<KVPair> | undefined, b: KVPair | PlainMessage<KVPair> | undefined): boolean {
    return proto3.util.equals(KVPair, a, b);
  }
}

/**
 * @generated from message sf.substreams.sink.types.v1.KVKeys
 */
export class KVKeys extends Message<KVKeys> {
  /**
   * @generated from field: repeated string keys = 1;
   */
  keys: string[] = [];

  constructor(data?: PartialMessage<KVKeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sf.substreams.sink.types.v1.KVKeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KVKeys {
    return new KVKeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KVKeys {
    return new KVKeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KVKeys {
    return new KVKeys().fromJsonString(jsonString, options);
  }

  static equals(a: KVKeys | PlainMessage<KVKeys> | undefined, b: KVKeys | PlainMessage<KVKeys> | undefined): boolean {
    return proto3.util.equals(KVKeys, a, b);
  }
}

